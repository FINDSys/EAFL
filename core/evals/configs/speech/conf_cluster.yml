# Configuration file of FAR training experiment

# ========== Cluster configuration ==========
# ip address of the parameter server (need 1 GPU)
ps_ip: 10.0.0.133

# ip address of each worker:# of gpus on this worker
# Note that if we collocate ps and worker, then we need to decrease this number of gpus by 1
# E.g., master node has 4 GPUs, then 1 for the ps, and worker should be set to: worker:3
worker_ips:
    - 10.0.0.133:[3] # worker_ip: [(# processes on gpu) for gpu in available_gpus]
    - 10.0.0.134:[3] # worker_ip: [(# processes on gpu) for gpu in available_gpus]
    - 10.0.0.135:[3] # worker_ip: [(# processes on gpu) for gpu in available_gpus]
    - 10.0.0.136:[3] # worker_ip: [(# processes on gpu) for gpu in available_gpus]

#HOME: /data/scratch/ahmed
exp_path: /data/scratch/ahmed/FedScale/core

# Entry function of executor and aggregator under $exp_path
executor_entry: executor.py

aggregator_entry: aggregator.py

auth:
    ssh_user: ""
    ssh_private_key: ~/.ssh/id_rsa

# cmd to run before we can indeed run FAR (in order)
setup_commands:
    #- source $HOME/anaconda3/bin/activate fedscale
#    - conda init bash
#    - . ~/.bashrc
#    - conda activate fedscale
    #- /data/scratch/elton/miniconda3/condabin/conda init bash
    #- /data/scratch/elton/miniconda3/condabin/conda activate fedscale
    - source /data/scratch/elton/miniconda3/etc/profile.d/conda.sh
    - conda activate fedscale
    - export NCCL_SOCKET_IFNAME='enp1s0f1'         # Run "ifconfig" to ensure the right NIC for nccl if you have multiple NICs

# ========== Additional job configuration ==========
# Default parameters are specified in argParser.py, wherein more description of the parameter can be found

job_conf:
    - log_path: /data/scratch/ahmed/FedScale/core/evals # Path of log files
    - job_name: google_speech                   # Generate logs under this folder: log_path/job_name/time_stamp
    - task: speech
    - total_worker: 100                      # Number of participants per round, we use K=100 in our paper, large K will be much slower
    - data_set: google_speech                     # Dataset: openImg, google_speech, stackoverflow
    #- data_dir: $HOME/FedScale/dataset/data/google_speech    # Path of the dataset
    #- data_map_file: $HOME/FedScale/dataset/data/google_speech/client_data_mapping/train.csv              # Allocation of data to each client, turn to iid setting if not provided
    - data_dir: /data/scratch/ahmed/FedScale/dataset/google_speech    # Path of the dataset
    - data_map_file: /data/scratch/ahmed/dataset/google_speech/clientDataMap              # Allocation of data to each client, turn to iid setting if not provided
    - device_conf_file: /data/scratch/ahmed/FedScale/dataset/data/device_info/client_device_capacity     # Path of the client trace
    - device_avail_file: /data/scratch/ahmed/FedScale/dataset/data/device_info/client_behave_trace
    - model: resnet34                            # Models: e.g., shufflenet_v2_x2_0, mobilenet_v2, resnet34, albert-base-v2
    - gradient_policy: yogi                 # {"fed-yogi", "fed-prox", "fed-avg"}, "fed-avg" by default
    - eval_interval: 30                     # How many rounds to run a testing on the testing set
    - epochs: 5000                          # Number of rounds to run this training. We use 1000 in our paper, while it may converge w/ ~400 rounds
    - filter_less: 21                       # Remove clients w/ less than 21 samples
    - num_loaders: 4
    - yogi_eta: 3e-3
    - yogi_tau: 1e-8
    - local_steps: 30
    - learning_rate: 0.05
    - batch_size: 20
    - test_bsz: 20



